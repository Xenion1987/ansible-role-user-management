---
# tasks file for roles/user_management

- name: "GROUP | Ensure default primary group is created"
  when: user_management_default_primary_group is defined and user_management_default_primary_group
  ansible.builtin.group:
    name: "{{ user_management_default_primary_group }}"
    state: present

- name: GROUP | Ensure default secondary groups are created
  loop: "{{ user_management_default_secondary_groups }}"
  when: user_management_default_secondary_groups is defined and user_management_default_secondary_groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present

- name: FILE | Ensure default home root directory exists
  when: user_management_default_home_root is defined and user_management_default_home_root
  ansible.builtin.file:
    path: "{{ user_management_default_home_root }}"
    state: directory
    mode: "0755"

- name: INCLUDE TASKS | 'manage_user_groups'
  loop: "{{ user_management_users }}"
  ansible.builtin.include_tasks:
    file: manage_user_groups.yml

# - name: INCLUDE TASKS | 'manage_user'
#   loop: "{{ user_management_users }}"
#   ansible.builtin.include_tasks:
#     file: manage_user.yml
- name: "BLOCK | Manage user"
  block:
    - name: "USER | Manage user"
      loop: "{{ user_management_users }}"
      loop_control:
        label: "name: {{ item.name }}; state: {{ item.state | d('present') }}"
      ansible.builtin.user:
        # Use user_management_users.groups_append if defined, else append secondary groups if user_management_users.secondary_groups are defined
        append: "{{ item.groups_append if item.groups_append is defined and item.groups_append else user_management_default_secondary_groups_append if user_management_default_secondary_groups_append is defined and user_management_default_secondary_groups_append else omit }}"
        comment: "{{ item.gecos | default(omit) }}"
        # Use user_management_users.home_create if set, else set 'true'
        create_home: "{{ item.home_create | default(true) }}"
        # This only affects 'state=absent', it forces removal of the user and associated directories on supported platforms.
        force: "{{ item.userdel_force | default(false) }}"
        # Use user_management_users.primary_group if defined, else use user_management_users.name as primary group
        group: "{{ item.primary_group if item.primary_group is defined and item.primary_group else user_management_default_primary_group if user_management_default_primary_group is defined and user_management_default_primary_group else omit }}"
        # Use user_management_users.secondary_groups if defined, else skip modifying secondary groups
        groups: "{{ item.secondary_groups if item.secondary_groups is defined and item.secondary_groups else user_management_default_secondary_groups if user_management_default_secondary_groups is defined and user_management_default_secondary_groups else omit }}"
        # Optionally set the user's home directory.
        home: "{{ item.absolute_home_path if item.absolute_home_path is defined and item.absolute_home_path else user_management_default_home_root ~ '/' ~ item.name if user_management_default_home_root is defined and user_management_default_home_root else omit }}"
        # If set to true when used with 'home:', attempt to move the user's old home directory to the specified directory
        # if it isn't there already and the old home exists.
        move_home: "{{ item.home_move if item.home_move is defined and item.home_move else user_management_default_home_move if user_management_default_home_move is defined and user_management_default_home_move else omit }}"
        name: "{{ item.name }}"
        # This only affects 'state=absent', it attempts to remove directories associated with the user
        remove: "{{ item.userdel_remove | default(false) }}"
        # Use user_management_users.shell if defined, else use default shell as defined in defaults file
        shell: "{{ item.shell if item.shell is defined and item.shell else user_management_default_shell if user_management_default_shell is defined and user_management_default_shell else omit }}"
        state: "{{ item.state | d('present') }}"
    - name: "USER | Manage password"
      loop: "{{ user_management_users }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.state | d("present") == "present"
        - item.password is defined and item.password
      ansible.builtin.user:
        name: "{{ item.name }}"
        password: "{{ item.password | default(omit) }}"

# - name: INCLUDE TASKS | 'manage_authorized_keys'
#   loop: "{{ user_management_users }}"
#   ansible.builtin.include_tasks:
#     file: manage_authorized_keys.yml
- name: BLOCK | Manage authorized_keys files
  block:
    - name: "GETENT | passwd"
      ansible.builtin.getent:
        database: passwd
    - name: "FILE | Ensure '.ssh' directory exists"
      loop: "{{ user_management_users }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state | d('present') == "present"
      ansible.builtin.file:
        state: directory
        path: "{{ ansible_facts.getent_passwd[item.name][4] }}/.ssh"
        mode: "0700"
        owner: "{{ ansible_facts.getent_passwd[item.name][1] }}"
        group: "{{ ansible_facts.getent_passwd[item.name][2] }}"

    - name: "TEMPLATE | Manage authorized key(s)"
      loop: "{{ user_management_users }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.state | d('present') == "present"
        - item.ssh_public_keys is defined
      ansible.builtin.template:
        src: authorized_keys.j2
        dest: "{{ ansible_facts.getent_passwd[item.name][4] }}/.ssh/authorized_keys"
        mode: "0600"
        owner: "{{ ansible_facts.getent_passwd[item.name][1] }}"
        group: "{{ ansible_facts.getent_passwd[item.name][2] }}"
