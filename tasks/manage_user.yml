---
- name: "USER | Manage: {{ item.name }}"
  ansible.builtin.user:
    # Use user_management_users.groups_append if defined, else append secondary groups if user_management_users.secondary_groups are defined
    append: "{{ item.groups_append | default(user_management_default_secondary_groups_append) if item.secondary_groups | default(user_management_default_secondary_groups) else omit }}"
    comment: "{{ item.gecos | default(omit) }}"
    # Use user_management_users.home_create if set, else set 'true'
    create_home: "{{ item.home_create | default(true) }}"
    # This only affects 'state=absent', it forces removal of the user and associated directories on supported platforms.
    force: "{{ item.userdel_force | default(false) }}"
    # Use user_management_users.primary_group if defined, else use user_management_users.name as primary group
    group: "{{ item.primary_group | default(user_management_default_primary_group) if item.primary_group | default(user_management_default_primary_group) else omit }}"
    # Use user_management_users.secondary_groups if defined, else skip modifying secondary groups
    groups: "{{ item.secondary_groups | default(user_management_default_secondary_groups) if item.secondary_groups | default(user_management_default_secondary_groups) else omit }}"
    # Optionally set the user's home directory.
    home: "{{ item.absolute_home_path | default(user_management_default_home_root ~ '/' ~ item.name) if item.absolute_home_path | default(user_management_default_home_root ~ '/' ~ item.name) else omit }}"
    # If set to true when used with 'home:', attempt to move the user's old home directory to the specified directory
    # if it isn't there already and the old home exists.
    move_home: "{{ item.home_move | default(omit) }}"
    name: "{{ item.name }}"
    # This only affects 'state=absent', it attempts to remove directories associated with the user
    remove: "{{ item.userdel_remove | default(false) }}"
    # Use user_management_users.shell if defined, else use default shell as defined in defaults file
    shell: "{{ item.shell | default(user_management_default_shell) if user_management_default_shell | default else omit }}"
    state: "{{ item.state }}"
